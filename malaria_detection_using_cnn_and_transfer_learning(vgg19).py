# -*- coding: utf-8 -*-
"""Malaria Detection using CNN and Transfer Learning(VGG19).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZbekzB4IXkB1hak3-q6YNkzYro0CTiv0
"""



from tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Conv2D
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.vgg19 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.models import Sequential

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from glob import glob

##Here resizing all data images
IMAGE_SIZE = [224,224]
train_path = "/content/drive/MyDrive/Malaria_dataset/malaria_dataset/Train"
test_path = "/content/drive/MyDrive/Malaria_dataset/malaria_dataset/Test"

###Importing the Vgg 19 library as shown below and add preprocessig layer to the front of VGG19
##Here we will using imagnet weights

vgg = VGG19(input_shape= IMAGE_SIZE + [3], weights= 'imagenet', include_top= False)

##Don't train the existing weights
for layer in vgg.layers:
  layer.trainable = False

"""### Remember that we removing first and last layer bcoz for first layer we give new image size, and for last layer how many number of classes should be there,we give 2 classes at last layer."""

#we can see that first layer with given image size and  last layer is not there , at the flatten layer it is cut.
vgg.summary()

##useful for getting number of output classes
folders = glob("/content/drive/MyDrive/Malaria_dataset/malaria_dataset/Train/*")

folders

len(folders)

x = Flatten()(vgg.output)

#here we adding output layer with two nodes ie len(folders)
prediction = Dense(len(folders), activation= "softmax")(x)

#create model object
model = Model(inputs =  vgg.input,outputs = prediction)

#view the structure of the model
model.summary()

from tensorflow.keras.layers import MaxPooling2D

####create model from scratch using CNN
model = Sequential()
model.add(Conv2D(filters= 16, kernel_size= 2, padding= "same", activation= "relu", input_shape = (224, 224, 3)))
model.add(MaxPooling2D(pool_size= 2))
model.add(Conv2D(filters= 32, kernel_size= 2, padding= "same", activation= "relu"))
model.add(MaxPooling2D(pool_size= 2))
model.add(Conv2D(filters= 64, kernel_size= 2, padding= "same", activation= 'relu'))
model.add(MaxPooling2D(pool_size= 2))
model.add(Flatten())
model.add(Dense(500, activation= 'relu'))
model.add(Dense(2, activation= 'softmax'))

model.summary()

#now compile the model
model.compile(loss = 'categorical_crossentropy', optimizer= 'adam', metrics= ['accuracy'])

##use the image data generator to import images from the dataset
from tensorflow.keras.preprocessing.image import ImageDataGenerator
#Here we are doing image augmentation.
#also here we rescale image in trainset and test set bcoz image pixel ranging from 0 to 255 size so we convert it into 0 to 1 size.
train_datagen = ImageDataGenerator(rescale= 1./ 255, shear_range= 0.2, zoom_range=0.2, horizontal_flip= True)

#for test dataset we do only scaling n not imagedata generator processing.
test_datagen = ImageDataGenerator(rescale= 1./255)

#Remember that we provide the same target size as initialized for the image size.

training_set = train_datagen.flow_from_directory("/content/drive/My Drive/Malaria_dataset/malaria_dataset/Train",
                                                 target_size = (224, 224), batch_size = 32, class_mode = 'categorical')

test_set = test_datagen.flow_from_directory("/content/drive/My Drive/Malaria_dataset/malaria_dataset/Test",
                                            target_size = (224, 224), batch_size = 32, class_mode = 'categorical')

#Now we fit the model
r = model.fit_generator(training_set, validation_data= test_set, epochs= 50, steps_per_epoch= len(training_set), validation_steps= len(test_set))

y_pred = model.predict(test_set)

y_pred = np.argmax(y_pred, axis=1)

y_pred

# plot the loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

##save model as a h5 file.
from tensorflow.keras.models import load_model
model.save("malaria_model_vgg19.h5")

from  tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

model = load_model("malaria_model_vgg19.h5")

img = image.load_img("/content/drive/MyDrive/Malaria_dataset/malaria_dataset/Test/Uninfected/C3thin_original_IMG_20150608_162922_cell_191.png", target_size = (224,224))

x = image.img_to_array(img)

x

x.shape

##rescaling size
x = x/255.0

x = np.expand_dims(x, axis = 0)
img_data = preprocess_input(x)
img_data.shape

model.predict(img_data)

a = np.argmax(model.predict(img_data), axis = 1)

if (a == 1):
  print("Uninfected")
else:
  print("Infected")





































